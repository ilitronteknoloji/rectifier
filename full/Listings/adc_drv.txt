; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\objects\adc_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\adc_drv.d --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I.\MyLibrary -I.\RTE\_SCS -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32F0xx\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F030x8 -DUSE_FULL_LL_DRIVER -D"HSE_VALUE=4000000	" --omf_browse=.\objects\adc_drv.crf adc_drv.cpp]
                          THUMB

                          AREA ||i._Z10adc_enablev||, CODE, READONLY, ALIGN=2

                  _Z10adc_enablev PROC ; adc_enable()
;;;127      */
;;;128    void adc_enable(){
000000  4808              LDR      r0,|L1.36|
;;;129    
;;;130    if (READ_BIT(ADCREG->ISR,ADC_ISR_ADRDY) != 0) 
000002  6800              LDR      r0,[r0,#0]  ; ADCREG
000004  6801              LDR      r1,[r0,#0]
000006  07ca              LSLS     r2,r1,#31
;;;131    {
;;;132     ADCREG->ISR |= ADC_ISR_ADRDY;													// adc_calibrate ready bitini resetlemek için 1 durumuna getir
000008  2101              MOVS     r1,#1
00000a  2a00              CMP      r2,#0                 ;130
00000c  d002              BEQ      |L1.20|
00000e  6802              LDR      r2,[r0,#0]
000010  430a              ORRS     r2,r2,r1
000012  6002              STR      r2,[r0,#0]
                  |L1.20|
;;;133    }
;;;134    
;;;135    SET_BIT(ADCREG->CR,ADC_CR_ADEN);												// Adc �alistir
000014  6882              LDR      r2,[r0,#8]
000016  430a              ORRS     r2,r2,r1
000018  6082              STR      r2,[r0,#8]
                  |L1.26|
;;;136    
;;;137    while(READ_BIT(ADCREG->ISR,ADC_ISR_ADRDY) == 1);								// Adc hazirlanmasini bekle
00001a  6801              LDR      r1,[r0,#0]
00001c  07c9              LSLS     r1,r1,#31
00001e  d1fc              BNE      |L1.26|
;;;138    };
000020  4770              BX       lr
;;;139    /**
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      ||.data||

                          AREA ||i._Z11adc_disablev||, CODE, READONLY, ALIGN=2

                  _Z11adc_disablev PROC ; adc_disable()
;;;169      */
;;;170    void adc_disable(){
000000  4807              LDR      r0,|L2.32|
;;;171    
;;;172    ADC1->CR |= ADC_CR_ADSTP;														//
000002  6881              LDR      r1,[r0,#8]
000004  2210              MOVS     r2,#0x10
000006  4311              ORRS     r1,r1,r2
000008  6081              STR      r1,[r0,#8]
                  |L2.10|
;;;173    while ((ADC1->CR & ADC_CR_ADSTP) != 0);
00000a  6881              LDR      r1,[r0,#8]
00000c  06c9              LSLS     r1,r1,#27
00000e  d4fc              BMI      |L2.10|
;;;174    ADC1->CR |= ADC_CR_ADDIS; 
000010  6881              LDR      r1,[r0,#8]
000012  2202              MOVS     r2,#2
000014  4311              ORRS     r1,r1,r2
000016  6081              STR      r1,[r0,#8]
                  |L2.24|
;;;175    while ((ADC1->CR & ADC_CR_ADEN) != 0);
000018  6881              LDR      r1,[r0,#8]
00001a  07c9              LSLS     r1,r1,#31
00001c  d1fc              BNE      |L2.24|
;;;176    };
00001e  4770              BX       lr
;;;177    
                          ENDP

                  |L2.32|
                          DCD      0x40012400

                          AREA ||i._Z12adc_clk_initv||, CODE, READONLY, ALIGN=2

                  _Z12adc_clk_initv PROC ; adc_clk_init()
;;;99       */
;;;100    void adc_clk_init(){
000000  480a              LDR      r0,|L3.44|
;;;101    SET_BIT(RCCREG->APB1ENR,RCC_APB2ENR_ADC1EN);									// Adc clokc çalıştır
000002  6840              LDR      r0,[r0,#4]  ; RCCREG
000004  69c1              LDR      r1,[r0,#0x1c]
000006  2201              MOVS     r2,#1
000008  0252              LSLS     r2,r2,#9
00000a  4311              ORRS     r1,r1,r2
00000c  61c1              STR      r1,[r0,#0x1c]
;;;102    SET_BIT(RCCREG->CR2,RCC_CR2_HSI14ON); 											// High speed internal rc oscilatorünü devreye sok
00000e  6b41              LDR      r1,[r0,#0x34]
000010  2201              MOVS     r2,#1
000012  4311              ORRS     r1,r1,r2
000014  6341              STR      r1,[r0,#0x34]
;;;103    while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0); 									// oscilatör çalışmasını bekle
000016  4806              LDR      r0,|L3.48|
                  |L3.24|
000018  6b41              LDR      r1,[r0,#0x34]
00001a  0789              LSLS     r1,r1,#30
00001c  d5fc              BPL      |L3.24|
;;;104    
;;;105    ADC1->CFGR2 &= (~ADC_CFGR2_CKMODE); 											// kaynak olarak HSI14 ü seç
00001e  4805              LDR      r0,|L3.52|
000020  6901              LDR      r1,[r0,#0x10]
000022  0089              LSLS     r1,r1,#2
000024  0889              LSRS     r1,r1,#2
000026  6101              STR      r1,[r0,#0x10]
;;;106    };
000028  4770              BX       lr
;;;107    
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      ||.data||
                  |L3.48|
                          DCD      0x40021000
                  |L3.52|
                          DCD      0x40012400

                          AREA ||i._Z13adc_calibratev||, CODE, READONLY, ALIGN=2

                  _Z13adc_calibratev PROC ; adc_calibrate()
;;;113      */
;;;114    void adc_calibrate(){
000000  4909              LDR      r1,|L4.40|
;;;115    CLEAR_BIT(ADCREG->CR,ADC_CR_ADEN);												// ADC kapat
000002  6808              LDR      r0,[r1,#0]  ; ADCREG
000004  6882              LDR      r2,[r0,#8]
000006  0852              LSRS     r2,r2,#1
000008  0052              LSLS     r2,r2,#1
00000a  6082              STR      r2,[r0,#8]
;;;116    CLEAR_BIT(RCCREG->AHBENR,RCC_AHBENR_DMAEN);										// DMA kapat
00000c  6849              LDR      r1,[r1,#4]  ; RCCREG
00000e  694a              LDR      r2,[r1,#0x14]
000010  0852              LSRS     r2,r2,#1
000012  0052              LSLS     r2,r2,#1
000014  614a              STR      r2,[r1,#0x14]
;;;117    
;;;118    SET_BIT(ADCREG->CR,ADC_CR_ADCAL);												// Kalibrasyon baslat
000016  6881              LDR      r1,[r0,#8]
000018  2201              MOVS     r2,#1
00001a  07d2              LSLS     r2,r2,#31
00001c  4311              ORRS     r1,r1,r2
00001e  6081              STR      r1,[r0,#8]
                  |L4.32|
;;;119    		
;;;120    while(READ_BIT(ADCREG->CR,ADC_CR_ADCAL));										// Kalibrasyonu bekle
000020  6881              LDR      r1,[r0,#8]
000022  2900              CMP      r1,#0
000024  dbfc              BLT      |L4.32|
;;;121    };
000026  4770              BX       lr
;;;122    
                          ENDP

                  |L4.40|
                          DCD      ||.data||

                          AREA ||i._Z13adc_dma_startPj||, CODE, READONLY, ALIGN=2

                  _Z13adc_dma_startPj PROC ; adc_dma_start(unsigned*)
;;;83       */
;;;84     void adc_dma_start(uint32_t *ADC_array){
000000  b510              PUSH     {r4,lr}
;;;85     RCC->AHBENR |= RCC_AHBENR_DMA1EN; 												// DMA clock açılışı
000002  490d              LDR      r1,|L5.56|
000004  694b              LDR      r3,[r1,#0x14]
000006  2201              MOVS     r2,#1
000008  4313              ORRS     r3,r3,r2
00000a  614b              STR      r3,[r1,#0x14]
;;;86     ADC1->CFGR1 |= ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG; 								// ADC dma moduna alınır ve circular moda geçilir
00000c  490b              LDR      r1,|L5.60|
00000e  68cb              LDR      r3,[r1,#0xc]
000010  2403              MOVS     r4,#3
000012  4323              ORRS     r3,r3,r4
000014  60cb              STR      r3,[r1,#0xc]
;;;87     DMA1_Channel1->CPAR = (uint32_t) (&(ADC1->DR)); 								// peripheral adresi yazılır
000016  4b09              LDR      r3,|L5.60|
000018  4909              LDR      r1,|L5.64|
00001a  3340              ADDS     r3,r3,#0x40
00001c  610b              STR      r3,[r1,#0x10]
;;;88     DMA1_Channel1->CMAR = (uint32_t)(ADC_array); 									// memory adresi yazılır
00001e  6148              STR      r0,[r1,#0x14]
;;;89     DMA1_Channel1->CNDTR = sizeof(ADC_array); 										// adress boyutu yazıkıt
000020  2004              MOVS     r0,#4
000022  60c8              STR      r0,[r1,#0xc]
;;;90     DMA1_Channel1->CCR |= DMA_CCR_MINC | DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0			// artış tipi boyutu ve circular hareket bilgisi girilir
000024  6888              LDR      r0,[r1,#8]
000026  23b5              MOVS     r3,#0xb5
000028  00db              LSLS     r3,r3,#3
00002a  4318              ORRS     r0,r0,r3
00002c  6088              STR      r0,[r1,#8]
;;;91      | DMA_CCR_TEIE | DMA_CCR_CIRC; 												//
;;;92     DMA1_Channel1->CCR |= DMA_CCR_EN; 												// DMA1 çalıştırılır
00002e  6888              LDR      r0,[r1,#8]
000030  4310              ORRS     r0,r0,r2
000032  6088              STR      r0,[r1,#8]
;;;93     
;;;94     }
000034  bd10              POP      {r4,pc}
;;;95     /**
                          ENDP

000036  0000              DCW      0x0000
                  |L5.56|
                          DCD      0x40021000
                  |L5.60|
                          DCD      0x40012400
                  |L5.64|
                          DCD      0x40020000

                          AREA ||i._Z8adc_initj||, CODE, READONLY, ALIGN=2

                  _Z8adc_initj PROC ; adc_init(unsigned)
;;;143      */
;;;144    uint32_t *adc_init(uint32_t Channels){
000000  b510              PUSH     {r4,lr}
000002  4603              MOV      r3,r0
;;;145    
;;;146    
;;;147    adc_calibrate();																// Kalibrasyonu yap
000004  f7fffffe          BL       _Z13adc_calibratev ; adc_calibrate()
;;;148    adc_clk_init();																	// Clock ayarlarini yap
000008  f7fffffe          BL       _Z12adc_clk_initv ; adc_clk_init()
;;;149    adc_enable();																	// adcyi çalıştır												
00000c  f7fffffe          BL       _Z10adc_enablev ; adc_enable()
;;;150    adc_channel_select(Channels);													// adc kanallarını başlat
000010  4a18              LDR      r2,|L6.116|
000012  6a90              LDR      r0,[r2,#0x28]
000014  4318              ORRS     r0,r0,r3
000016  6290              STR      r0,[r2,#0x28]
;;;151    
;;;152    SET_BIT(ADCREG->CFGR1,ADC_CFGR1_CONT);											// adcyi devamlı çalışma moduna al
000018  4817              LDR      r0,|L6.120|
00001a  6800              LDR      r0,[r0,#0]  ; ADCREG
00001c  68c1              LDR      r1,[r0,#0xc]
00001e  1453              ASRS     r3,r2,#17
000020  4319              ORRS     r1,r1,r3
000022  60c1              STR      r1,[r0,#0xc]
;;;153    CLEAR_BIT(ADCREG->CFGR1,ADC_CFGR1_DISCEN);										// emin olmak için disc mode kapalı
000024  68c1              LDR      r1,[r0,#0xc]
000026  00db              LSLS     r3,r3,#3
000028  4399              BICS     r1,r1,r3
00002a  60c1              STR      r1,[r0,#0xc]
;;;154    SET_BIT(ADCREG->CFGR1,ADC_CFGR1_SCANDIR);										// ileri yönde çalıştır kanal 0 -> kanal 1 -> kanal 2 -> kanal 3 ....
00002c  68c1              LDR      r1,[r0,#0xc]
00002e  2304              MOVS     r3,#4
000030  4319              ORRS     r1,r1,r3
000032  60c1              STR      r1,[r0,#0xc]
;;;155    adc_set_res(ADC_RES_12_BIT);													// resolution 12 bit 
000034  68c1              LDR      r1,[r0,#0xc]
000036  2318              MOVS     r3,#0x18
000038  4399              BICS     r1,r1,r3
00003a  60c1              STR      r1,[r0,#0xc]
00003c  68c1              LDR      r1,[r0,#0xc]
00003e  60c1              STR      r1,[r0,#0xc]
;;;156    CLEAR_BIT(ADCREG->CFGR1,ADC_CFGR1_ALIGN);										// little endian modu
000040  68c1              LDR      r1,[r0,#0xc]
000042  2320              MOVS     r3,#0x20
000044  4399              BICS     r1,r1,r3
000046  60c1              STR      r1,[r0,#0xc]
;;;157    SET_BIT(ADCREG->CFGR1,ADC_CFGR1_OVRMOD);										// overrun durumu ile ilgilenme
000048  68c1              LDR      r1,[r0,#0xc]
00004a  1493              ASRS     r3,r2,#18
00004c  4319              ORRS     r1,r1,r3
00004e  60c1              STR      r1,[r0,#0xc]
000050  2000              MOVS     r0,#0
000052  4601              MOV      r1,r0
                  |L6.84|
000054  6a93              LDR      r3,[r2,#0x28]
000056  420b              TST      r3,r1
000058  d000              BEQ      |L6.92|
00005a  1c40              ADDS     r0,r0,#1
                  |L6.92|
00005c  1c49              ADDS     r1,r1,#1
00005e  2912              CMP      r1,#0x12
000060  d3f8              BCC      |L6.84|
;;;158    
;;;159    
;;;160    int NumberofChannels = ACTIVE_CHANNEL_COUNT(); 
;;;161    uint32_t *Adc_buffer = new uint32_t[NumberofChannels];
000062  0080              LSLS     r0,r0,#2
000064  f7fffffe          BL       _Znaj ; operator new[] (unsigned)
000068  4604              MOV      r4,r0
;;;162    adc_dma_start(Adc_buffer);
00006a  f7fffffe          BL       _Z13adc_dma_startPj ; adc_dma_start(unsigned*)
;;;163    return Adc_buffer;
00006e  4620              MOV      r0,r4
;;;164    };
000070  bd10              POP      {r4,pc}
;;;165    /**
                          ENDP

000072  0000              DCW      0x0000
                  |L6.116|
                          DCD      0x40012400
                  |L6.120|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z13adc_dma_startPj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z13adc_dma_startPj||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._Z12adc_clk_initv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12adc_clk_initv||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._Z13adc_calibratev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13adc_calibratev||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._Z10adc_enablev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10adc_enablev||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._Z8adc_initj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8adc_initj||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._Z11adc_disablev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11adc_disablev||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  ADCREG
                          DCD      0x40012400
                  RCCREG
                          DCD      0x40021000

;*** Start embedded assembler ***

#line 1 "adc_drv.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_adc_drv_cpp_ADCREG___Z7__REV16j|
#line 467 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.5.1\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___11_adc_drv_cpp_ADCREG___Z7__REV16j| PROC
#line 468

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_adc_drv_cpp_ADCREG___Z7__REVSHs|
#line 482
|__asm___11_adc_drv_cpp_ADCREG___Z7__REVSHs| PROC
#line 483

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
